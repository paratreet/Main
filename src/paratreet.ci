module paratreet {
  include "Configuration.h";
  include "CkArrayIndexKey.h";
  include "BoundingBox.h";
  include "Splitter.h";
  include "CentroidData.h";
  include "Node.h";
  include "ProxyHolders.h";
  class CProxy_Reader;
  class CProxy_TreeSpec;
  include "MultiData.h";

  include "Decomposition.h";
  PUPable SfcDecomposition;
  PUPable OctDecomposition;
  PUPable KdDecomposition;
  PUPable LongestDimDecomposition;

  readonly CProxy_Reader readers;
  readonly CProxy_TreeSpec treespec;
  readonly int n_readers;
  readonly CProxy_TreeCanopy<CentroidData> centroid_calculator;
  readonly CProxy_CacheManager<CentroidData> centroid_cache;
  readonly CProxy_Resumer<CentroidData> centroid_resumer;

  message ParticleMsg {
    Particle particles[];
  };

  template <typename Data>
#ifdef GROUP_CACHE
  group CacheManager {
#else
  nodegroup CacheManager {
#endif
    entry CacheManager();
    entry void initialize(const CkCallback&);
    entry void requestNodes(std::pair<Key, int>);
    entry void recvStarterPack(std::pair<Key, SpatialNode<Data>> pack [n], int n, CkCallback);
    entry void addCache(MultiData<Data>);
    entry void restoreData(std::pair<Key, SpatialNode<Data>>);
    entry void receiveSubtree(MultiData<Data>, PPHolder<Data>);
    template <typename Visitor>
    entry void startPrefetch(DPHolder<Data>, CkCallback);
    entry void startParentPrefetch(DPHolder<Data>, CkCallback);
    entry void destroy(bool);
    entry void resetCachedParticles(CkCallback);
  };
#ifdef GROUP_CACHE
  group CacheManager<CentroidData>;
#else
  nodegroup CacheManager<CentroidData>;
#endif

  template <typename Data>
  group Resumer {
    entry Resumer();
    entry void collectAndResetStats(CkCallback cb);
    entry void collectMetaData(const CkCallback & cb);
    entry [expedited] void process(Key);
  };
  group Resumer<CentroidData>;

  group Writer {
    entry Writer(std::string of, int n_particles);
    entry void receive(std::vector<Particle> particles, Real time, int iter);
    entry void write(CkCallback cb);
  }

  group TipsyWriter {
    entry TipsyWriter(std::string of, int n_particles);
    entry void receive(std::vector<Particle> particles, Real time, int iter);
    entry void write(int prefix_count, CkCallback cb);
  }

  template <typename Data>
  array [1d] Partition {
    entry Partition(int, CProxy_CacheManager<Data>, CProxy_Resumer<Data>, TCHolder<Data>, bool);
    template <typename Visitor> entry void startDown();
    template <typename Visitor> entry void startUpAndDown();
    entry void interact(const CkCallback&);
    entry void goDown();
    entry void receiveLeaves(std::vector<Key>, Key, int, TPHolder<Data>);
    entry void makeLeaves(int);
    entry void destroy();
    entry void reset();
    entry void kick(Real, CkCallback cb);
    entry void perturb(Real, CkCallback cb);
    entry void rebuild(BoundingBox, TPHolder<Data>, bool);
    entry void output(CProxy_Writer, int, CkCallback);
    entry void output(CProxy_TipsyWriter, int, CkCallback);
    entry void callPerLeafFn(int indicator, CkCallback cb);
    entry void deleteParticleOfOrder(int order);
    entry void pauseForLB();
  }
  array [1d] Partition<CentroidData>;

  template <typename Data>
  array [1d] Subtree {
    entry Subtree(const CkCallback&, int, int, int, TCHolder<Data>, CProxy_Resumer<Data>, CProxy_CacheManager<Data>, DPHolder<Data>, bool);
    entry void receive(ParticleMsg*);
    entry void buildTree(CProxy_Partition<Data>, CkCallback);
    entry void requestNodes(Key, int);
    entry void requestCopy(int, PPHolder<Data>);
    entry void destroy();
    entry void reset();
    entry void sendLeaves(CProxy_Partition<Data>);
    template <typename Visitor> entry void startDual();
    entry void goDown();
    entry void checkParticlesChanged(const CkCallback&);
    entry void collectMetaData(const CkCallback & cb);
    entry void pauseForLB();
  }
  array [1d] Subtree<CentroidData>;

  template <typename Data>
  array [Key] TreeCanopy {
    entry TreeCanopy();
    entry void reset();
    entry [createhere] void recvProxies(TPHolder<Data>, int, CProxy_CacheManager<Data>, DPHolder<Data>);
    entry void recvData(SpatialNode<Data>, int);
    entry void requestData (int);
  };
  array [1d] TreeCanopy<CentroidData>;

  template <typename Data>
  chare Driver {
    entry Driver(CProxy_CacheManager<Data>);
    entry [threaded] void init(CkCallback cb);
    entry [threaded] void run(CkCallback cb);
    entry [reductiontarget] void countInts(unsigned long long intrn_counts [4]);
    entry [reductiontarget] void reportTime();
    entry void recvTC(std::pair<Key, SpatialNode<Data>>);
    entry void loadCache(CkCallback);
    template <typename Visitor>
    entry void prefetch(Data, int, CkCallback);
    entry void request(Key request_list [list_size], int list_size, int, CkCallback);
  }
  chare Driver<CentroidData>;

  group Reader {
    entry Reader();
    entry void load(std::string, const CkCallback&);
    entry void computeUniverseBoundingBox(const CkCallback&);
    entry void assignKeys(BoundingBox, const CkCallback&);
    template <typename Data>
    entry void request(CProxy_Subtree<Data>, int, int);
    entry void countOct(std::vector<Key>, size_t, const CkCallback&);
    entry void countSfc(const std::vector<QuickSelectSFCState>&, size_t, const CkCallback&);
    entry void countKd(const std::vector<QuickSelectKDState>&, const CkCallback&);
    entry void countLongestDim(const CkCallback&);
    entry void initBinarySplit(const CkCallback&);
    entry void doBinarySplit(const std::vector<std::pair<int, Real>>&, const CkCallback&);
    entry void getAllSfcKeys(const CkCallback&);
    entry void getAllPositions(const CkCallback&);
    entry void pickSamples(const int, const CkCallback&);
    entry void prepMessages(const std::vector<Key>&, const CkCallback&);
    entry void redistribute();
    entry void receive(ParticleMsg*);
    entry void localSort(const CkCallback&);
    entry void checkSort(const Key, const CkCallback&);
    template <typename Data>
    entry void flush(int, CProxy_Subtree<Data>);
    template <typename Data>
    entry void assignPartitions(int, CProxy_Partition<Data>);
  };

  group TreeSpec {
    entry TreeSpec(const paratreet::Configuration&);
    entry void check(const CkCallback&);
    entry void reset();
    entry void receiveDecomposition(const CkCallback&, CkPointer<Decomposition>, bool);
    entry [local] Decomposition* getSubtreeDecomposition();
    entry [local] Decomposition* getPartitionDecomposition();
    entry void receiveConfiguration(const paratreet::Configuration&,CkCallback);
    entry [local] paratreet::Configuration& getConfiguration();
    entry [local] void setConfiguration(const paratreet::Configuration&);
  }

  group DecompArrayMap : CkArrayMap {
    entry DecompArrayMap(CkPointer<Decomposition>, int, int);
  };

  extern entry void Reader request<CentroidData>(CProxy_Subtree<CentroidData>, int, int);
  extern entry void Reader flush<CentroidData>(int, CProxy_Subtree<CentroidData>);
  extern entry void Reader assignPartitions<CentroidData>(int, CProxy_Partition<CentroidData>);

};
