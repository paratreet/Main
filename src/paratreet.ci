mainmodule paratreet {
  include "BoundingBox.h";
  include "Splitter.h";
  include "CentroidData.h";
  include "Node.h";
  include "ProxyHolders.h";
  class CProxy_Reader;
  class CProxy_TreeSpec;
  include "MultiData.h";
  include "Decomposition.h";

  readonly CProxy_Main mainProxy;
  readonly CProxy_Reader readers;
  readonly CProxy_TreeSpec treespec;
  readonly std::string input_file;
  readonly int n_readers;
  readonly double decomp_tolerance;
  readonly int max_particles_per_tp;
  readonly int max_particles_per_leaf;
  readonly int decomp_type;
  readonly int tree_type;
  readonly int num_iterations;
  readonly int flush_period;
  readonly int num_share_levels;
  readonly int cache_share_depth;
  readonly bool verify;
  readonly CProxy_TreeCanopy<CentroidData> centroid_calculator;
  readonly CProxy_CacheManager<CentroidData> centroid_cache;
  readonly CProxy_Resumer<CentroidData> centroid_resumer;
  readonly CProxy_CountManager count_manager;

  mainchare Main {
    initnode void initialize();
    entry Main(CkArgMsg* m);
    entry [threaded] void run();
    entry [reductiontarget] void checkParticlesChangedDone(bool result); // For debugging
  };

  message ParticleMsg {
    Particle particles[];
  };

  template <typename Data>
#ifdef GROUP_CACHE
  group CacheManager {
#else
  nodegroup CacheManager {
#endif
    entry CacheManager();
    entry void requestNodes(std::pair<Key, int>);
    entry void recvStarterPack(std::pair<Key, Data> pack [n], int n, CkCallback);
    entry void addCache(MultiData<Data>);
    entry void restoreData(std::pair<Key, Data>);
    template <typename Visitor>
    entry void startPrefetch(DPHolder<Data>, CkCallback);
    entry void startParentPrefetch(DPHolder<Data>, CkCallback);
    entry void destroy(bool);
  };
#ifdef GROUP_CACHE
  group CacheManager<CentroidData>;
#else
  nodegroup CacheManager<CentroidData>;
#endif

  extern entry [aggregate] void CacheManager<CentroidData> restoreData(std::pair<Key, CentroidData>);
  extern entry [aggregate] void CacheManager<CentroidData> addCache(MultiData<CentroidData>);
  extern entry [aggregate] void CacheManager<CentroidData> requestNodes(std::pair<Key, int>);
  extern entry void CacheManager<CentroidData> startPrefetch<GravityVisitor>(DPHolder<CentroidData>, CkCallback); 

  template <typename Data>
  group Resumer {
    entry Resumer();
    entry void destroy();
    entry [expedited] void process(Key);
  };
  group Resumer<CentroidData>;

  template <typename Data>
  array [1d] TreePiece {
    entry TreePiece(const CkCallback&, int, int, TCHolder<Data>, CProxy_Resumer<Data>, CProxy_CacheManager<Data>, DPHolder<Data>);
    entry void receive(ParticleMsg*);
    entry void check(const CkCallback&);
    entry void buildTree();
    entry void triggerRequest();
    template<typename Visitor> entry void startDown();
    template<typename Visitor> entry void startUpAndDown();
    template<typename Visitor> entry void startDual();
    entry void processLocal(const CkCallback&);
    entry void interact(const CkCallback&);
    entry void goDown(Key);
    entry void requestNodes(Key, int);
    entry void perturb(Real timestep, bool);
    entry void flush(CProxy_Reader);

    entry void checkParticlesChanged(const CkCallback&);
    entry void output(std::string, const CkCallback&);
  };
  array [1d] TreePiece<CentroidData>;

  extern entry void TreePiece<CentroidData> startDown<GravityVisitor> ();
  extern entry void TreePiece<CentroidData> startDual<GravityVisitor> ();
  extern entry void TreePiece<CentroidData> startUpAndDown<DensityVisitor> ();
  extern entry void TreePiece<CentroidData> startDown<PressureVisitor> ();
  extern entry void TreePiece<CentroidData> startDual<CountVisitor> ();

  template <typename Data>
  array [1d] TreeCanopy {
    entry TreeCanopy();
    entry void reset();
    entry [createhere] void recvProxies(TPHolder<Data>, int, CProxy_CacheManager<Data>, DPHolder<Data>);
    entry void recvData(Data, int);
    entry void requestData (int);
  };
  array [1d] TreeCanopy<CentroidData>;

  template <typename Data>
  chare Driver {
    entry Driver(CProxy_CacheManager<Data>);
    entry [threaded] void init(CkCallback cb);
    entry [threaded] void run(CkCallback cb);
    entry [reductiontarget] void countInts(int intrn_counts [2]);
    entry void recvTC(std::pair<Key, Data>);
    entry void loadCache(CkCallback);
    template <typename Visitor>
    entry void prefetch(Data, int, CkCallback);
    entry void request(Key request_list [list_size], int list_size, int, CkCallback);
  }
  chare Driver<CentroidData>;
  extern entry void Driver<CentroidData> prefetch<GravityVisitor> (CentroidData, int, CkCallback);

  group Reader {
    entry Reader();
    entry void load(std::string, const CkCallback&);
    entry void computeUniverseBoundingBox(const CkCallback&);
    entry void assignKeys(BoundingBox, const CkCallback&);
    template <typename Data>
    entry void request(CProxy_TreePiece<Data>, int, int);
    entry void countOct(std::vector<Key>, const CkCallback&);
    entry void countSfc(const CkCallback&);
    //entry void countSfc(const std::vector<Key>&, const CkCallback&);
    entry void pickSamples(const int, const CkCallback&);
    entry void prepMessages(const std::vector<Key>&, const CkCallback&);
    entry void redistribute();
    entry void receive(ParticleMsg*);
    entry void localSort(const CkCallback&);
    entry void checkSort(const Key, const CkCallback&);
    template <typename Data>
    entry void flush(int, int, CProxy_TreePiece<Data>);
  };

  group TreeSpec {
    entry TreeSpec(int tree_type, int decomp_type);
    entry void receiveDecomposition(CkMarshallMsg*);
    entry [local] Decomposition* getDecomposition();
  }

  extern entry void Reader request<CentroidData>(CProxy_TreePiece<CentroidData>, int, int);
  extern entry void Reader flush<CentroidData>(int, int, CProxy_TreePiece<CentroidData>);

  group CountManager {
    entry CountManager(double min, double max, int nbins);
    entry void sum(const CkCallback&);
  }
};
